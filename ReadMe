# MobileEvents-Pub-Sub

# Project Title
Mobile events Pub Sub Model.
Note:- Client side retry mechanism - Server side high throughput and low latency event messaging - No data loss

## Getting Started
Import the ready to use spring boot project.

## Design and Implementation
The project has 2 REST APIs to simulate Mobile Client SDK and BE server.

Client SDK
Test#1) "Create an SDK method call that will be used to track events generated by a mobile app and send event messages and associated attributes to an event tracking server using a RESTful HTTP endpoint.
Use example events like ‘session_start’, ‘iap_purchase’ or ‘ads_click’.
Add attributes and other metadata which you think is relevant to the event."

Mobile Client SDK
--------------------
publishEvent(EventDTOList dtoList)

Stream events with REST api to simulate events generated by mobile
Method:POST
http://localhost:8080/publish/event/stream
{
 "eventDTOList":[
	{"userId":"Samantha",
	"eventName" :"session_start",
	"mobileIMEI_id":"SDF45435"},
	{
	"userId":"John",
	"eventName" :"iap_purchase",
	"mobileIMEI_id":"34WED234D"}
	]

}

UserId,IMEI_id and eventName are EventDTO send to B.E server

BE server
-------------
Test#2) "Create a RESTful HTTP server endpoint that accepts events coming for above"
-The Events from the client get published to BE with http://localhost:8080/publish/events

The Events gets logged in BE as
========================================
Consumer End : Events submited by user : (Samantha)
Mobile MEI_id -> (SDF45435)
event name -> (session_start)
event Id -> (ebfd9fbf-ae9d-449c-8fb1-67bcc23deb27)
event dateTime -> (2019-04-01T20:25:38.120)
========================================
Consumer End : Events submited by user : (John)
Mobile MEI_id -> (34WED234D)
event name -> (iap_purchase)
event Id -> (8d5f5d48-6f5a-4eec-891b-02a8f61cbb70)
event dateTime -> (2019-04-01T20:25:38.120)
========================================

##Resilience
Client Side
------------------
Test#1) "Ensure that every event in the mobile app is tracked by using a retry mechanism in case of a messaging failure."
The mobile events generated at the high stream(RestApiEventPublisher) is stored in a client-side queue and send to server with an EventProducerThread.
-This makes every event of interest stored and streamed to the server with real-time and no event data loss.
-In case a message is not received by server(HttpStatus is not accepted or some exception on rest call), the thread makes "3" attempts to re-send the
event. After re-try fails(mobile offline,network,server down etc) the event is put back to queue, till queue is full.This happens in EventProducerThread.

Server Side
-------------------
Test#2) "Be mindful of the performance of your code as this server is supposed to provide service for a high throughput and low latency messaging traffic."
During high throughput, the messages delivered to the server may increase exponentially. This is mitigated with a server-side message queue.
-The server-side thread(EventConsumerThread.java) ensures continuous processing of events.
-In case of exception, HTTP status with Bad Request is thrown so that client can re-send it.
-Low latency is ensured by storing "event" safely in the queue and returning HTTP status ACCEPTED immediately.