# MobileEvents-Pub-Sub

# Project Title
Mobile events Pub Sub Model.

## Getting Started
Import the ready to use spring boot project.

## Design and Implementation
The project 2 REST apis to simulate Mobile Client SDK and BE server.

Client SDK
"Create an SDK method call that will be used to track events generated by a mobile app and send event messages and associated attributes to an event tracking server using a RESTful HTTP endpoint.
Use example events like ‘session_start’, ‘iap_purchase’ or ‘ads_click’.
Add attributes and other metadata which you think is relevant to the event."

Mobile Client SDK
publishEvent(EventDTOList dtoList)

Event Stream REST api to simulate events generated by mobile
Method:POST
http://localhost:8080/publish/event/stream
{
 "eventDTOList":[
	{"userId":"Samantha",
	"eventName" :"session_start",
	"mobileIMEI_id":"SDF45435"},
	{
	"userId":"John",
	"eventName" :"iap_purchase",
	"mobileIMEI_id":"34WED234D"}
	]

}
UserId,IMEI_id and eventName are EventDTO send to B.E server

BE server
"Create a RESTful HTTP server endpoint that accepts events coming for above"

The Events from the client get published to BE with
http://localhost:8080/publish/events

The Events gets logged in BE as
========================================
Consumer End : Events submited by user : (Samantha)
Mobile MEI_id -> (SDF45435)
event name -> (session_start)
========================================
Consumer End : Events submited by user : (John)
Mobile MEI_id -> (34WED234D)
event name -> (iap_purchase)
========================================

##Resilience
Client Side
"Ensure that every event in the mobile app is tracked by using a retry mechanism in case of a messaging failure."

The mobile events generated at high stream(RestApiEventPublisher) is stored in a client side queue and send to server with a EventProducerThread.
This makes every event of interest stored and streamed to server with real time and no event data loss.
In case message is not recieved by server(HttpStatus is not accepted or some exception on rest call),the thread makes "3" attempts to re-send the
event.This happens in EventProducerThread.

Server Side
"Be mindful of the performance of your code as this server is supposed to provide service for a high throughput and low latency messaging traffic."
During high throughput, the messages delievered to server may increase exponentially. This is mitigated with a server side message queue.
The server side thread(EventConsumerThread.java) insures continous processing of events.
Incase of exception HTTP status Bad Request error is thrown so that client can re-send it.
Low latency is insured by storing event in the queue and returning HTTP status ACCEPTED.
